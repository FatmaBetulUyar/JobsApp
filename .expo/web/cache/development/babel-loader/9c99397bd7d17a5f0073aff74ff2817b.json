{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/fatmabetuluyar/Downloads/firebase-push-notification-recipes-app/src/screens/Camera/CameraScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { firebaseStorage } from \"../../FirebaseConfig\";\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1,\n              base64: true\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onPressSend = function onPressSend() {\n    var response, blob, storageRef;\n    return _regeneratorRuntime.async(function onPressSend$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(image));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 5:\n            blob = _context3.sent;\n            storageRef = ref(firebaseStorage, \"uploadedImage/\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10));\n            uploadBytes(storageRef, blob).then(function (snapshot) {\n              console.log('Image has been uploaded!!!');\n            });\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    onPress: pickImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }), image && React.createElement(Button, {\n    onPress: onPressSend,\n    title: \"G\\xF6nder\",\n    color: \"#841584\",\n    accessibilityLabel: \"G\\xF6nder\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/fatmabetuluyar/Downloads/firebase-push-notification-recipes-app/src/screens/Camera/CameraScreen.js"],"names":["React","useState","useEffect","ImagePicker","ref","uploadBytes","firebaseStorage","ImagePickerExample","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","base64","result","cancelled","uri","onPressSend","fetch","response","blob","storageRef","Math","random","toString","replace","substr","then","snapshot","console","log","flex","alignItems","justifyContent","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Image, View, Platform } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { ref, uploadBytes } from \"firebase/storage\";\nimport { firebaseStorage } from '../../FirebaseConfig'\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n      base64: true\n    });\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  const onPressSend = async () => {\n    const response = await fetch(image); \n    const blob = await response.blob();\n    \n    const storageRef = ref(firebaseStorage, \"uploadedImage/\" + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10));\n    uploadBytes(storageRef, blob).then((snapshot) => {\n      console.log('Image has been uploaded!!!');\n    });\n  }\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      {image && <Button\n            onPress={onPressSend}\n            title=\"Gönder\"\n            color=\"#841584\"\n            accessibilityLabel=\"Gönder\"\n            />}\n      \n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}