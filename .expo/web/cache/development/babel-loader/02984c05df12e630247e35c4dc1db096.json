{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/fatmabetuluyar/Downloads/firebase-push-notification-recipes-app/src/screens/LoginRegister/LoginRegister.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { firebaseAuth, firestoreDb } from \"../../FirebaseConfig\";\nimport { addDoc, collection, setDoc, doc } from \"firebase/firestore\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nexport default function LoginRegister(props) {\n  var setAuth = props.setAuth;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mail = _useState2[0],\n      setMail = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoginScreen = _useState6[0],\n      setIsLoginScreen = _useState6[1];\n\n  function registerForPushNotificationsAsync() {\n    var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Constants.isDevice) {\n              _context.next = 21;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n          case 3:\n            _await$Notifications$ = _context.sent;\n            existingStatus = _await$Notifications$.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n          case 9:\n            _await$Notifications$2 = _context.sent;\n            status = _await$Notifications$2.status;\n            finalStatus = status;\n\n          case 12:\n            if (!(finalStatus !== 'granted')) {\n              _context.next = 15;\n              break;\n            }\n\n            alert('Failed to get push token for push notification!');\n            return _context.abrupt(\"return\");\n\n          case 15:\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 17:\n            token = _context.sent.data;\n            console.log(token);\n            _context.next = 22;\n            break;\n\n          case 21:\n            alert('Must use physical device for Push Notifications');\n\n          case 22:\n            if (Platform.OS === 'android') {\n              Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            return _context.abrupt(\"return\", token);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var loginHandle = function loginHandle() {\n    return _regeneratorRuntime.async(function loginHandle$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            signInWithEmailAndPassword(firebaseAuth, mail, password).then(function _callee2(userCredential) {\n              return _regeneratorRuntime.async(function _callee2$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      registerForPushNotificationsAsync().then(function _callee(token) {\n                        return _regeneratorRuntime.async(function _callee$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                _context2.next = 2;\n                                return _regeneratorRuntime.awrap(setDoc(doc(firestoreDb, \"userData\", mail), {\n                                  expoToken: token\n                                }));\n\n                              case 2:\n                                Alert.alert(\"Good Job!\", \"You have successfully logged in.\", [{\n                                  text: \"OK\",\n                                  onPress: function onPress() {\n                                    return setAuth(true);\n                                  }\n                                }]);\n\n                              case 3:\n                              case \"end\":\n                                return _context2.stop();\n                            }\n                          }\n                        }, null, null, null, Promise);\n                      });\n\n                    case 1:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }).catch(function (error) {\n              var errorCode = error.code;\n              var errorMessage = error.message.replace(\"Firebase:\", \"\");\n              ;\n              Alert.alert(errorCode, errorMessage, [{\n                text: \"OK\",\n                onPress: function onPress() {\n                  return console.log(\"OK Pressed\");\n                }\n              }]);\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var registerHandle = function registerHandle() {\n    return _regeneratorRuntime.async(function registerHandle$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            createUserWithEmailAndPassword(firebaseAuth, mail, password).then(function (userCredential) {\n              Alert.alert(\"Good Job!\", \"You have successfully registered.\", [{\n                text: \"OK\",\n                onPress: function onPress() {\n                  return setIsLoginScreen(true);\n                }\n              }]);\n            }).catch(function (error) {\n              var errorCode = error.code;\n              var errorMessage = error.message.replace(\"Firebase:\", \"\");\n              Alert.alert(errorCode, errorMessage, [{\n                text: \"OK\",\n                onPress: function onPress() {\n                  return console.log(\"OK Pressed\");\n                }\n              }]);\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var styles = StyleSheet.create({\n    input: {\n      height: 40,\n      marginTop: 10,\n      marginBottom: 10,\n      borderWidth: 1,\n      padding: 10,\n      width: '100%'\n    },\n    headText: {\n      marginTop: 20,\n      fontSize: 30,\n      width: '100%',\n      textAlign: 'center'\n    },\n    imageButton: {\n      marginTop: 10\n    },\n    button: {\n      marginTop: 10,\n      marginBottom: 20\n    }\n  });\n  return isLoginScreen == true ? React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.headText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Login\"), React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: setMail,\n    value: mail,\n    placeholder: \"Email adresi\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: setPassword,\n    value: password,\n    placeholder: \"\\u015Eifre\",\n    secureTextEntry: true,\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    onPress: loginHandle,\n    style: styles.button,\n    title: \"Login\",\n    color: \"#841584\",\n    accessibilityLabel: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return setIsLoginScreen(false);\n    },\n    style: styles.button,\n    title: \"Register\",\n    color: \"#841584\",\n    accessibilityLabel: \"Register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  })) : React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.headText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, \"Register\"), React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: setMail,\n    value: mail,\n    placeholder: \"Email adresi\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: setPassword,\n    value: password,\n    placeholder: \"\\u015Eifre\",\n    secureTextEntry: true,\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: registerHandle,\n    style: styles.button,\n    title: \"Register\",\n    color: \"#841584\",\n    accessibilityLabel: \"Register\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      return setIsLoginScreen(true);\n    },\n    style: styles.button,\n    title: \"Login\",\n    color: \"#841584\",\n    accessibilityLabel: \"Login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/fatmabetuluyar/Downloads/firebase-push-notification-recipes-app/src/screens/LoginRegister/LoginRegister.js"],"names":["React","useState","createUserWithEmailAndPassword","signInWithEmailAndPassword","firebaseAuth","firestoreDb","addDoc","collection","setDoc","doc","Constants","Notifications","LoginRegister","props","setAuth","mail","setMail","password","setPassword","isLoginScreen","setIsLoginScreen","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","data","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","loginHandle","then","userCredential","expoToken","Alert","text","onPress","catch","error","errorCode","code","errorMessage","message","replace","registerHandle","styles","StyleSheet","create","input","height","marginTop","marginBottom","borderWidth","padding","width","headText","fontSize","textAlign","imageButton","button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, TextInput, SafeAreaView, Text, StyleSheet, View, Alert} from 'react-native';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { firebaseAuth, firestoreDb } from '../../FirebaseConfig'\nimport { addDoc, collection, setDoc, doc} from \"firebase/firestore\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications'; \n\nexport default function LoginRegister(props) {\n  const {setAuth} = props;\n  const [mail, setMail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoginScreen, setIsLoginScreen] = useState(true);\n\n  async function registerForPushNotificationsAsync() {\n    let token;\n    if (Constants.isDevice) {\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n  \n    if (Platform.OS === 'android') {\n      Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C',\n      });\n    }\n  \n    return token;\n  }\n\n  const loginHandle = async () => {\n    signInWithEmailAndPassword(firebaseAuth, mail, password)\n    .then(async (userCredential) => {\n      registerForPushNotificationsAsync().then(async token => {\n        await setDoc(doc(firestoreDb, \"userData\", mail), {\n          expoToken : token,\n        });\n\n        Alert.alert(\n          \"Good Job!\",\n          \"You have successfully logged in.\",\n          [\n            { text: \"OK\", onPress: () => setAuth(true)}\n          ]\n        );\n      });\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message.replace(\"Firebase:\", \"\");;\n      Alert.alert(\n        errorCode,\n        errorMessage,\n        [\n          { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n        ]\n      );\n    });\n  }\n\n  const registerHandle = async () => {\n    createUserWithEmailAndPassword(firebaseAuth, mail, password)\n    .then((userCredential) => {\n      Alert.alert(\n        \"Good Job!\",\n        \"You have successfully registered.\",\n        [\n          { text: \"OK\", onPress: () => setIsLoginScreen(true)}\n        ]\n      );\n    })\n    .catch((error) => {\n      const errorCode = error.code;\n      const errorMessage = error.message.replace(\"Firebase:\", \"\");\n      Alert.alert(\n        errorCode,\n        errorMessage,\n        [\n          { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n        ]\n      );\n    });\n  }\n\n  const styles = StyleSheet.create({\n    input: {\n      height: 40,\n      marginTop : 10,\n      marginBottom : 10,\n      borderWidth: 1,\n      padding: 10,\n      width : '100%'\n    },\n    headText : {\n      marginTop: 20,\n      fontSize : 30,\n      width : '100%',\n      textAlign : 'center'\n    },\n    imageButton : {\n      marginTop : 10\n    },\n    button : {\n      marginTop : 10,\n      marginBottom : 20\n    }\n  });\n\n  return (\n    isLoginScreen == true ? \n    <SafeAreaView>\n      <Text style= {styles.headText}>Login</Text>\n        <TextInput  \n          style={styles.input}\n          onChangeText={setMail}\n          value={mail}\n          placeholder = 'Email adresi'\n          autoCapitalize='none'\n        />\n        <TextInput  \n          style={styles.input}\n          onChangeText={setPassword}\n          value={password}\n          placeholder = 'Şifre'\n          secureTextEntry={true}\n          autoCapitalize='none'\n        />\n        <Button\n          onPress={loginHandle}\n          style={styles.button}\n          title=\"Login\"\n          color=\"#841584\"\n          accessibilityLabel=\"Login\"\n        />\n          <Button\n          onPress={() => setIsLoginScreen(false)}\n          style={styles.button}\n          title=\"Register\"\n          color=\"#841584\"\n          accessibilityLabel=\"Register\"\n        />\n    </SafeAreaView>\n    : \n    <SafeAreaView>\n    <Text style= {styles.headText}>Register</Text>\n      <TextInput  \n        style={styles.input}\n        onChangeText={setMail}\n        value={mail}\n        placeholder = 'Email adresi'\n        autoCapitalize='none'\n      />\n      <TextInput  \n        style={styles.input}\n        onChangeText={setPassword}\n        value={password}\n        placeholder = 'Şifre'\n        secureTextEntry={true}\n        autoCapitalize='none'\n      />\n      <Button\n        onPress={registerHandle}\n        style={styles.button}\n        title=\"Register\"\n        color=\"#841584\"\n        accessibilityLabel=\"Register\"\n      />\n      <Button\n        onPress={() => setIsLoginScreen(true)}\n        style={styles.button}\n        title=\"Login\"\n        color=\"#841584\"\n        accessibilityLabel=\"Login\"\n      />\n  </SafeAreaView>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}